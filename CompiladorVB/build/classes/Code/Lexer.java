/* The following code was generated by JFlex 1.4.3 on 19/03/21 10:48 AM */

package Code;
import static Code.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/03/21 10:48 AM from the specification file
 * <tt>C:/Users/bgera/OneDrive/Documentos/NetBeansProjects/CompiladorVB/src/Code/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\3\1\43\1\4\3\0"+
    "\1\41\1\0\1\45\1\46\1\37\1\35\1\3\1\36\1\53\1\40"+
    "\12\2\1\0\1\71\1\44\1\34\1\44\2\0\1\61\1\22\1\64"+
    "\1\15\1\57\1\70\2\1\1\7\2\1\1\66\1\54\1\55\3\1"+
    "\1\67\1\24\1\63\2\1\1\65\3\1\1\51\1\0\1\52\1\0"+
    "\1\1\1\0\1\23\1\20\1\62\1\30\1\12\1\26\1\13\1\32"+
    "\1\25\2\1\1\21\1\60\1\10\1\16\1\33\1\1\1\14\1\27"+
    "\1\11\1\17\1\1\1\31\1\56\2\1\1\47\1\42\1\50\u1f9b\0"+
    "\1\6\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\15\2"+
    "\1\6\1\7\1\10\1\11\1\12\3\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\12\2\1\24"+
    "\1\0\13\2\1\25\2\2\1\26\2\2\1\14\1\13"+
    "\1\0\4\2\1\27\1\2\1\30\4\2\1\31\6\2"+
    "\1\32\3\2\1\33\1\34\3\2\1\0\3\2\1\35"+
    "\6\2\1\36\1\37\1\40\2\2\1\41\5\2\1\3"+
    "\1\2\1\42\1\43\13\2\1\44\2\2\1\45\6\2"+
    "\1\46\1\47\2\2\1\50\1\51\1\52\6\2\1\53"+
    "\3\2\1\54\2\2\1\55\1\56\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\72\0\72\0\72"+
    "\0\72\0\u04c2\0\u04fc\0\u0488\0\u0488\0\u0536\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\72\0\u07b4"+
    "\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984"+
    "\0\u09be\0\u09f8\0\u0a32\0\164\0\u0a6c\0\u0aa6\0\164\0\u0ae0"+
    "\0\u0b1a\0\72\0\72\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c"+
    "\0\164\0\u0c76\0\164\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u07b4"+
    "\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\164\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\164\0\164\0\u0fa2\0\u0fdc\0\u1016\0\u1050"+
    "\0\u108a\0\u10c4\0\u10fe\0\164\0\u1138\0\u1172\0\u11ac\0\u11e6"+
    "\0\u1220\0\u125a\0\164\0\164\0\164\0\u1294\0\u12ce\0\164"+
    "\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\72\0\u142a\0\164"+
    "\0\164\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0"+
    "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\164\0\u16e2\0\u171c\0\164"+
    "\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\164\0\164"+
    "\0\u18b2\0\u18ec\0\164\0\164\0\164\0\u1926\0\u1960\0\u199a"+
    "\0\u19d4\0\u1a0e\0\u1a48\0\164\0\u1a82\0\u1abc\0\u1af6\0\164"+
    "\0\u1b30\0\u1b6a\0\164\0\164\0\164\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\3\1\11\1\12\1\3\1\13\1\14\3\3\1\15"+
    "\1\16\1\3\1\17\1\20\1\21\1\3\1\22\1\23"+
    "\1\3\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\3\1\47\1\3\1\50"+
    "\1\51\1\52\1\53\1\54\1\3\1\55\1\56\1\57"+
    "\73\0\2\3\4\0\25\3\20\0\15\3\3\0\1\4"+
    "\72\0\1\5\1\0\1\5\64\0\5\60\1\0\64\60"+
    "\5\7\1\0\64\7\1\0\2\3\4\0\1\3\1\61"+
    "\23\3\20\0\15\3\2\0\2\3\4\0\5\3\1\62"+
    "\15\3\1\63\1\3\20\0\15\3\2\0\2\3\4\0"+
    "\12\3\1\64\12\3\20\0\15\3\2\0\2\3\4\0"+
    "\3\3\1\65\21\3\20\0\15\3\2\0\2\3\4\0"+
    "\7\3\1\66\6\3\1\67\6\3\20\0\15\3\2\0"+
    "\2\3\4\0\7\3\1\70\15\3\20\0\15\3\2\0"+
    "\2\3\4\0\7\3\1\71\15\3\20\0\15\3\2\0"+
    "\2\3\4\0\2\3\1\72\5\3\1\73\14\3\20\0"+
    "\15\3\2\0\2\3\4\0\17\3\1\74\5\3\20\0"+
    "\15\3\2\0\2\3\4\0\7\3\1\75\4\3\1\76"+
    "\10\3\20\0\15\3\2\0\2\3\4\0\7\3\1\77"+
    "\15\3\20\0\15\3\2\0\2\3\4\0\23\3\1\100"+
    "\1\3\20\0\15\3\2\0\2\3\4\0\10\3\1\101"+
    "\14\3\20\0\15\3\35\0\1\102\76\0\1\103\72\0"+
    "\1\103\65\0\1\104\34\0\2\3\4\0\7\3\1\105"+
    "\4\3\1\106\10\3\20\0\15\3\2\0\2\3\4\0"+
    "\3\3\1\107\21\3\20\0\15\3\2\0\2\3\4\0"+
    "\1\3\1\110\23\3\20\0\15\3\2\0\2\3\4\0"+
    "\20\3\1\111\4\3\20\0\15\3\2\0\2\3\4\0"+
    "\12\3\1\112\12\3\20\0\15\3\2\0\2\3\4\0"+
    "\7\3\1\113\15\3\20\0\15\3\2\0\2\3\4\0"+
    "\7\3\1\114\15\3\20\0\15\3\2\0\2\3\4\0"+
    "\5\3\1\115\17\3\20\0\15\3\2\0\2\3\4\0"+
    "\3\3\1\116\21\3\20\0\15\3\2\0\2\3\4\0"+
    "\10\3\1\117\14\3\20\0\15\3\1\0\4\60\1\120"+
    "\1\0\64\60\1\0\2\3\4\0\2\3\1\121\22\3"+
    "\20\0\15\3\2\0\2\3\4\0\10\3\1\122\14\3"+
    "\20\0\15\3\2\0\2\3\4\0\3\3\1\123\21\3"+
    "\20\0\15\3\2\0\2\3\4\0\20\3\1\124\4\3"+
    "\20\0\15\3\2\0\2\3\4\0\2\3\1\125\22\3"+
    "\20\0\15\3\2\0\2\3\4\0\10\3\1\126\14\3"+
    "\20\0\15\3\2\0\2\3\4\0\25\3\20\0\4\3"+
    "\1\127\10\3\2\0\2\3\4\0\7\3\1\130\15\3"+
    "\20\0\15\3\2\0\2\3\4\0\7\3\1\131\15\3"+
    "\20\0\15\3\2\0\2\3\4\0\5\3\1\132\17\3"+
    "\20\0\15\3\2\0\2\3\4\0\11\3\1\133\13\3"+
    "\20\0\15\3\2\0\2\3\4\0\5\3\1\134\17\3"+
    "\20\0\15\3\2\0\2\3\4\0\12\3\1\135\12\3"+
    "\20\0\15\3\2\0\2\3\4\0\16\3\1\136\6\3"+
    "\20\0\15\3\2\0\2\3\4\0\11\3\1\137\13\3"+
    "\20\0\15\3\3\0\1\140\70\0\2\3\4\0\21\3"+
    "\1\141\3\3\20\0\15\3\2\0\2\3\4\0\16\3"+
    "\1\142\6\3\20\0\15\3\2\0\2\3\4\0\25\3"+
    "\20\0\2\3\1\143\12\3\2\0\2\3\4\0\21\3"+
    "\1\144\3\3\20\0\15\3\2\0\2\3\4\0\14\3"+
    "\1\145\10\3\20\0\15\3\2\0\2\3\4\0\1\3"+
    "\1\146\23\3\20\0\15\3\2\0\2\3\4\0\16\3"+
    "\1\147\6\3\20\0\15\3\2\0\2\3\4\0\14\3"+
    "\1\150\10\3\20\0\15\3\2\0\2\3\4\0\1\3"+
    "\1\151\23\3\20\0\15\3\2\0\2\3\4\0\3\3"+
    "\1\152\21\3\20\0\15\3\2\0\2\3\4\0\3\3"+
    "\1\153\21\3\20\0\15\3\2\0\2\3\4\0\1\3"+
    "\1\154\23\3\20\0\15\3\2\0\2\3\4\0\3\3"+
    "\1\155\21\3\20\0\15\3\2\0\2\3\4\0\10\3"+
    "\1\156\14\3\20\0\15\3\2\0\2\3\4\0\11\3"+
    "\1\157\13\3\20\0\15\3\2\0\2\3\4\0\24\3"+
    "\1\160\20\0\15\3\2\0\2\3\4\0\12\3\1\161"+
    "\12\3\20\0\15\3\2\0\2\3\4\0\10\3\1\162"+
    "\5\3\1\163\6\3\20\0\15\3\2\0\2\3\4\0"+
    "\20\3\1\122\4\3\20\0\15\3\2\0\2\3\4\0"+
    "\12\3\1\164\12\3\20\0\15\3\2\0\2\3\4\0"+
    "\12\3\1\165\12\3\20\0\15\3\3\0\1\140\43\0"+
    "\1\166\24\0\2\3\4\0\10\3\1\167\14\3\20\0"+
    "\15\3\2\0\2\3\4\0\1\3\1\170\23\3\20\0"+
    "\15\3\2\0\2\3\4\0\2\3\1\171\22\3\20\0"+
    "\15\3\2\0\2\3\4\0\20\3\1\172\4\3\20\0"+
    "\15\3\2\0\2\3\4\0\20\3\1\173\4\3\20\0"+
    "\15\3\2\0\2\3\4\0\2\3\1\174\22\3\20\0"+
    "\15\3\2\0\2\3\4\0\21\3\1\175\3\3\20\0"+
    "\15\3\2\0\2\3\4\0\25\3\20\0\6\3\1\176"+
    "\6\3\2\0\2\3\4\0\4\3\1\177\20\3\20\0"+
    "\15\3\2\0\2\3\4\0\5\3\1\200\17\3\20\0"+
    "\15\3\2\0\2\3\4\0\12\3\1\201\12\3\20\0"+
    "\15\3\2\0\2\3\4\0\3\3\1\202\21\3\20\0"+
    "\15\3\2\0\2\3\4\0\25\3\20\0\6\3\1\203"+
    "\6\3\2\0\2\3\4\0\1\3\1\204\23\3\20\0"+
    "\15\3\2\0\2\3\4\0\3\3\1\205\21\3\20\0"+
    "\15\3\2\0\2\3\4\0\16\3\1\206\6\3\20\0"+
    "\15\3\2\0\2\3\4\0\12\3\1\207\12\3\20\0"+
    "\15\3\2\0\2\3\4\0\20\3\1\210\4\3\20\0"+
    "\15\3\2\0\2\3\4\0\7\3\1\211\15\3\20\0"+
    "\15\3\2\0\2\3\4\0\3\3\1\212\21\3\20\0"+
    "\15\3\2\0\2\3\4\0\25\3\20\0\12\3\1\213"+
    "\2\3\2\0\2\3\4\0\2\3\1\214\22\3\20\0"+
    "\15\3\2\0\2\3\4\0\3\3\1\215\4\3\1\216"+
    "\14\3\20\0\15\3\2\0\2\3\4\0\1\3\1\217"+
    "\23\3\20\0\15\3\2\0\2\3\4\0\3\3\1\220"+
    "\21\3\20\0\15\3\2\0\2\3\4\0\14\3\1\221"+
    "\10\3\20\0\15\3\2\0\2\3\4\0\2\3\1\222"+
    "\22\3\20\0\15\3\2\0\2\3\4\0\4\3\1\223"+
    "\20\3\20\0\15\3\2\0\2\3\4\0\25\3\20\0"+
    "\6\3\1\224\6\3\2\0\2\3\4\0\3\3\1\225"+
    "\21\3\20\0\15\3\2\0\2\3\4\0\12\3\1\226"+
    "\12\3\20\0\15\3\2\0\2\3\4\0\25\3\20\0"+
    "\12\3\1\227\2\3\2\0\2\3\4\0\16\3\1\230"+
    "\6\3\20\0\15\3\2\0\2\3\4\0\16\3\1\231"+
    "\6\3\20\0\15\3\2\0\2\3\4\0\5\3\1\220"+
    "\17\3\20\0\15\3\2\0\2\3\4\0\3\3\1\232"+
    "\21\3\20\0\15\3\2\0\2\3\4\0\1\3\1\220"+
    "\23\3\20\0\15\3\2\0\2\3\4\0\10\3\1\233"+
    "\14\3\20\0\15\3\2\0\2\3\4\0\3\3\1\234"+
    "\21\3\20\0\15\3\2\0\2\3\4\0\16\3\1\235"+
    "\6\3\20\0\15\3\2\0\2\3\4\0\1\3\1\236"+
    "\23\3\20\0\15\3\2\0\2\3\4\0\7\3\1\237"+
    "\15\3\20\0\15\3\2\0\2\3\4\0\5\3\1\240"+
    "\17\3\20\0\15\3\2\0\2\3\4\0\5\3\1\241"+
    "\17\3\20\0\15\3\2\0\2\3\4\0\1\3\1\242"+
    "\23\3\20\0\15\3\2\0\2\3\4\0\3\3\1\243"+
    "\21\3\20\0\15\3\2\0\2\3\4\0\1\3\1\244"+
    "\23\3\20\0\15\3\2\0\2\3\4\0\3\3\1\245"+
    "\21\3\20\0\15\3\2\0\2\3\4\0\3\3\1\246"+
    "\21\3\20\0\15\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7076];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\4\11\5\1\6\11\12\1\1\11"+
    "\1\0\21\1\2\11\1\0\33\1\1\0\25\1\1\11"+
    "\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 49: break;
        case 20: 
          { lexeme=yytext(); return P_coma;
          }
        case 50: break;
        case 31: 
          { lexeme=yytext(); return Then;
          }
        case 51: break;
        case 15: 
          { lexeme=yytext(); return Llave_a;
          }
        case 52: break;
        case 45: 
          { lexeme=yytext(); return ReadLine;
          }
        case 53: break;
        case 27: 
          { lexeme=yytext(); return Sub;
          }
        case 54: break;
        case 47: 
          { lexeme=yytext(); return Structure;
          }
        case 55: break;
        case 32: 
          { lexeme=yytext(); return Else;
          }
        case 56: break;
        case 18: 
          { lexeme=yytext(); return Corchete_c;
          }
        case 57: break;
        case 38: 
          { lexeme=yytext(); return Return;
          }
        case 58: break;
        case 25: 
          { lexeme=yytext(); return Texto;
          }
        case 59: break;
        case 43: 
          { lexeme=yytext(); return Console;
          }
        case 60: break;
        case 28: 
          { lexeme=yytext(); return For;
          }
        case 61: break;
        case 41: 
          { lexeme=yytext(); return Public;
          }
        case 62: break;
        case 42: 
          { lexeme=yytext(); return Module;
          }
        case 63: break;
        case 35: 
          { lexeme=yytext(); return Next;
          }
        case 64: break;
        case 33: 
          { lexeme=yytext(); return Loop;
          }
        case 65: break;
        case 10: 
          { lexeme=yytext(); return Division;
          }
        case 66: break;
        case 12: 
          { lexeme = yytext(); return Op_relacional;
          }
        case 67: break;
        case 11: 
          { lexeme=yytext(); return Op_logico;
          }
        case 68: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 69: break;
        case 16: 
          { lexeme=yytext(); return Llave_c;
          }
        case 70: break;
        case 13: 
          { lexeme=yytext(); return Parentesis_a;
          }
        case 71: break;
        case 5: 
          { lexeme=yytext(); return Comillas;
          }
        case 72: break;
        case 29: 
          { lexeme=yytext(); return End;
          }
        case 73: break;
        case 40: 
          { lexeme=yytext(); return Cadena;
          }
        case 74: break;
        case 22: 
          { lexeme=yytext(); return Do;
          }
        case 75: break;
        case 19: 
          { lexeme=yytext(); return Punto;
          }
        case 76: break;
        case 23: 
          { lexeme=yytext(); return As;
          }
        case 77: break;
        case 34: 
          { lexeme=yytext(); return Main;
          }
        case 78: break;
        case 8: 
          { lexeme=yytext(); return Resta;
          }
        case 79: break;
        case 39: 
          { lexeme=yytext(); return T_dato;
          }
        case 80: break;
        case 46: 
          { lexeme=yytext(); return Function;
          }
        case 81: break;
        case 24: 
          { lexeme=yytext(); return To;
          }
        case 82: break;
        case 26: 
          { lexeme=yytext(); return Dim;
          }
        case 83: break;
        case 17: 
          { lexeme=yytext(); return Corchete_a;
          }
        case 84: break;
        case 14: 
          { lexeme=yytext(); return Parentesis_c;
          }
        case 85: break;
        case 9: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 86: break;
        case 37: 
          { lexeme=yytext(); return Class;
          }
        case 87: break;
        case 1: 
          { return ERROR;
          }
        case 88: break;
        case 48: 
          { lexeme=yytext(); return WriteLine;
          }
        case 89: break;
        case 6: 
          { lexeme=yytext(); return Igual;
          }
        case 90: break;
        case 44: 
          { lexeme=yytext(); return Int;
          }
        case 91: break;
        case 36: 
          { lexeme=yytext(); return While;
          }
        case 92: break;
        case 4: 
          { /*Ignore*/
          }
        case 93: break;
        case 30: 
          { lexeme = yytext(); return Op_booleano;
          }
        case 94: break;
        case 21: 
          { lexeme=yytext(); return If;
          }
        case 95: break;
        case 7: 
          { lexeme=yytext(); return Suma;
          }
        case 96: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
